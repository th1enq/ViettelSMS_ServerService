syntax = "proto3";

option go_package = "github.com/th1enq/ViettelSMS_ServerService/api/viettel_sms/v1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/api/httpbody.proto";

service ServerService {
    rpc CreateServer(CreateServerRequest) returns (CreateServerResponse) {
        option (google.api.http) = {
            post: "/api/v1/servers"
            body: "*"
        };
    }
    rpc UpdateServer(UpdateServerRequest) returns (UpdateServerResponse) {
        option (google.api.http) = {
            put: "/api/v1/servers/{server_id}"
            body: "*"
        };
    }
    rpc DeleteServer(DeleteServerRequest) returns (DeleteServerResponse) {
        option (google.api.http) = {
            delete: "/api/v1/servers/{server_id}"
        };
    }
    rpc ViewServer(ViewServerRequest) returns (ViewServerResponse) {
        option (google.api.http) = {
            post: "/api/v1/servers/search"
            body: "*"
        };
    }
    rpc ImportServer(google.api.HttpBody) returns (ImportServerResponse) {
        option (google.api.http) = {
            post: "/api/v1/servers/import"
            body: "*"
        };
    }
    rpc ExportServer(ExportServerRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            post: "/api/v1/servers/export"
            body: "*"
        };
    }
}

enum ServerStatus {
    SERVER_STATUS_UNKNOWN = 0;
    SERVER_STATUS_ONLINE = 1;
    SERVER_STATUS_OFFLINE = 2;
}

message Server {
    string server_id = 1;
    string server_name = 2;
    ServerStatus status = 3;
    string ipv4 = 4;
    string location = 5;
    string os = 6;
    uint64 interval_check_time = 7;
    google.protobuf.Timestamp created_at = 8;
}

message CreateServerRequest {
    string server_id = 1;
    string server_name = 2;
    string ipv4 = 3;
    string location = 4;
    string os = 5;
    uint64 interval_check_time = 6;
}

message CreateServerResponse {
    Server server = 1;
}

message UpdateServerRequest {
    string server_id = 1;
    string server_name = 2;
    string ipv4 = 3;
    string location = 4;
    string os = 5;
    uint64 interval_check_time = 6;
}

message UpdateServerResponse {
    Server server = 1;
}

message DeleteServerRequest {
    string server_id = 1;
}

message DeleteServerResponse {}

message ViewServerFilterOptions {
    string server_name = 1;
    ServerStatus status = 2;
}

message ViewServerPaginationOptions {
    int32 page = 1;
    int32 page_size = 2;
    string sort_by = 3;
    string sort_order = 4;
}

message ViewServerRequest {
    ViewServerFilterOptions filter = 1;
    ViewServerPaginationOptions pagination = 2;
}

message ViewServerResponse {
    repeated Server servers = 1;
    int32 total_count = 2;
}

message ImportServerResponse {
    uint32 success_count = 1;
    repeated string success_ids = 2;
    uint32 failure_count = 3;
    repeated string failure_ids = 4;
}

message ExportServerRequest {
    ViewServerFilterOptions filter = 1;
    ViewServerPaginationOptions pagination = 2;
}

message ExportServerResponse {
    repeated Server servers = 1;
}