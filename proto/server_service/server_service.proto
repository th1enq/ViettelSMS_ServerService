syntax = "proto3";

option go_package = "/proto/server_service";

import "google/protobuf/timestamp.proto";

service ServerService {
    rpc CreateServer(CreateServerRequest) returns (CreateServerResponse) {}
    rpc ViewServer(ViewServerRequest) returns (ViewServerResponse) {}
    rpc UpdateServer(UpdateServerRequest) returns (UpdateServerResponse) {}
    rpc DeleteServer(DeleteServerRequest) returns (DeleteServerResponse) {}
    rpc ImportServers(ImportServersRequest) returns (ImportServersResponse) {}
    rpc ExportServers(ExportServersRequest) returns (ExportServersResponse) {}
}

enum ServerStatus {
  SERVER_STATUS_UNSPECIFIED = 0;
  SERVER_STATUS_ON = 1;
  SERVER_STATUS_OFF = 2;
  SERVER_STATUS_UNDEFINED = 3;
}

message ServerListSortOrder {
    enum Values {
        SERVER_ID_ASC = 0;
        SERVER_ID_DESC = 1;
        SERVER_NAME_ASC = 2;
        SERVER_NAME_DESC = 3;
        STATUS_ASC = 4;
        STATUS_DESC = 5;
        IPV4_ASC = 6;
        IPV4_DESC = 7;
        LOCATION_ASC = 8;
        LOCATION_DESC = 9;
        OS_ASC = 10;
        OS_DESC = 11;
        CREATED_AT_ASC = 12;
        CREATED_AT_DESC = 13;
    }
}

message Server {
  uint32 id = 1;
  string server_id = 2;
  string server_name = 3;
  ServerStatus status = 4;
  string ipv4 = 5;
  string location = 7;
  string os = 8;
  int64 interval_time = 9;
  google.protobuf.Timestamp created_at = 10;
}

message ServerListFilterOptions {
    string server_id = 1;
    string server_name = 2;
    ServerStatus status = 3;
    string ipv4 = 4;
    string location = 5;
    string os = 6;
}

message ServerListPagination {
    uint32 offset = 1;
    uint32 limit = 2;
    ServerListSortOrder sort_order = 3;
}

message CreateServerRequest {
    string server_id = 1;
    string server_name = 2;
    string ipv4 = 3;
    string location = 4;
    string os = 5;
    uint32 interval_check_time = 6;
}


message CreateServerResponse {
    string id = 1;
}

message ViewServerRequest {
    uint32 offset = 1;
    uint32 limit = 2;
    ServerListFilterOptions filter = 3;
    ServerListSortOrder.Values sort_order = 4;
}

message ViewServerResponse {
    repeated Server servers = 1;
    uint32 total_count = 2;
}

message UpdateServerRequest {
    string server_name = 1;
    string ipv4 = 2;
    string location = 3;
    string os = 4;
    uint32 interval_check_time = 5;
}

message UpdateServerResponse {
    Server server = 1;
}

message DeleteServerRequest {
    string server_id = 1;
}

message DeleteServerResponse {
    bool success = 1;
}

message ImportServersRequest {
    repeated Server servers = 1;
}

message ImportServersResponse {
    uint32 success_count = 1;
    repeated string success_ids = 2;
    uint32 failure_count = 3;
    repeated string failure_ids = 4;
}

message ExportServersRequest {
    ServerListFilterOptions filter = 1;
}

message ExportServersResponse {
    repeated Server servers = 1;
}